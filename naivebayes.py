# -*- coding: utf-8 -*-
"""NaiveBayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O9S9k5SRgKHJxhXUo_xXDLr99LmRKgHS
"""

import json
import pandas as pd
import numpy as np
import math
import random
from sklearn.model_selection import KFold
import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns


#--------------P(cuisine)-----------------
def get_cuisine_probs(data):
    cuisine_count = {}
    maxp=0
    for recipe in data:
        cuisine = recipe['cuisine']
        cuisine_count[cuisine] = cuisine_count.get(cuisine, 0) + 1
    cuisine_probs = {cuisine : cuisine_count[cuisine]/float(len(data)) for cuisine in cuisine_count}
    return cuisine_probs

#-------P(cuisine|ingredient)-------------

def ingredient_prob(data):
    ingredient_prob_given_cuisine = {}
    
    for recipe in data:
        cuisine = recipe['cuisine']
        ingredients = recipe['ingredients']
        for ingredient in ingredients:
            ingredient_probs = ingredient_prob_given_cuisine.get(cuisine, {})
            ingredient_probs[ingredient] = ingredient_probs.get(ingredient, 0) + 1
            ingredient_prob_given_cuisine[cuisine] = ingredient_probs

    for cuisine in ingredient_prob_given_cuisine:
        probs = ingredient_prob_given_cuisine[cuisine]
        total = float(sum(probs[ingredient] for ingredient in probs))
        ingredient_prob_given_cuisine[cuisine] = {ingredient : probs[ingredient]/total for ingredient in probs}
    return ingredient_prob_given_cuisine


#--------Max P()--------------------------
def max_cuisine(ingredient_list, cuisine_probs, ingredient_prob_given_cuisine):
    max_prob = 0#math.log(1e-16)
    best_cuisine = None
  
    for cuisine in cuisine_probs:
      prob = cuisine_probs[cuisine]
      for ingredient in ingredient_list:
        p = ingredient_prob_given_cuisine[cuisine].get(ingredient,0) + 1e-16
        prob = prob*p 
      if prob > max_prob:
        max_prob = prob
        best_cuisine = cuisine
    return best_cuisine

#-------Classify---------
def classifier(data):
    l = int(0.75*len(data))
    train_data = data[:l]
    test_data =  data[l:]
    cuisine_probs = get_cuisine_probs(train_data)
    ingredient_prob_given_cuisine = ingredient_prob(train_data)
    results = []
    for recipe in test_data:
        cuisine = max_cuisine(recipe['ingredients'], cuisine_probs, ingredient_prob_given_cuisine)
        results.append((cuisine, recipe['cuisine']))
    return results

def classifier_cross(train_data,test_data):
    cuisine_probs = get_cuisine_probs(train_data)
    ingredient_prob_given_cuisine = ingredient_prob(train_data)
    results = []
    for recipe in test_data:
        cuisine = max_cuisine(recipe['ingredients'], cuisine_probs, ingredient_prob_given_cuisine)
        results.append((cuisine, recipe['cuisine']))
    return results

#-------Evaluation--------

def evaluation(results):
    return sum(guessed_cuisine == true_cuisine for (guessed_cuisine, true_cuisine) in results)/float(len(results))


#--------Naive Bayes ----------------------
def NB():
 data = []
 with open('/content/training.json') as f:
  for line in f:
    data.append(json.loads(line))
 random.shuffle(data)
 print(style.BOLD + "Accuracy score of Naive Bayes is :" + style.END)
 scores = evaluation(classifier(data))
 print(scores)
 fig = plt.figure()
 fig.suptitle('Accuracy')
 ax = fig.add_subplot(111)
 plt.boxplot(scores)
 ax.set_xticklabels('Naive Bayes')
 ax.set_ylabel('Scores')
 plt.show()

#-----------Cross Val Naive -------------------
from statistics import mean 
def NBCross():
 data = []
 with open('/content/training.json') as f:
  for line in f:
    data.append(json.loads(line))
 random.shuffle(data)
 data = np.array(data)
 scores=[]
 kf=KFold(n_splits=6, random_state=None, shuffle=True)
 for train_index, test_index in kf.split(data):
   X_train, X_test = data[train_index.astype(int)], data[test_index.astype(int)]
   scores.append(evaluation(classifier_cross(X_train,X_test)))
 
 print(style.BOLD +"Accuracy of NB with 6-cross validation :" + style.END)
 print(scores)
 print("\n")
 print(style.BOLD + "Max Accuracy of 6-cross :" + style.END)
 print(max(scores))
 print("\n")
 print(style.BOLD + "Min Accuracy of 6-cross :" + style.END)
 print(min(scores))
 print("\n")
 print(style.BOLD + "Mean Accuracy of 6-cross :"+ style.END)
 print(mean(scores))
 print("\n")
 fig = plt.figure()
 fig.suptitle('Naive Bayes Accuracy')
 ax = fig.add_subplot(111)
 plt.boxplot(scores)
 ax.set_xticklabels('Naive Bayes')
 ax.set_ylabel('Cross-Validation: Accuracy Score')
 plt.show()

#------------------Predicting Cuisine by Chance -------------------
def Cuisine_by_Chance():
 data = []
 with open('/content/training.json') as f:
   for line in f:
    data.append(json.loads(line))
 random.shuffle(data)
 l = int(0.75*len(data))
 train_data = data[:l]
 test_data =  data[l:]
 cuisine_probs = get_cuisine_probs(train_data)
 ingredient_prob_given_cuisine = ingredient_prob(train_data)
 results = []
 all_cuisines = []
 for r in data:
  all_cuisines.append(r['cuisine'])
  all_cuisines = list(set(all_cuisines))
 for recipe in test_data:
   cuisine = random.choice(all_cuisines)
   results.append((cuisine, recipe['cuisine']))

 print(style.BOLD + "Accuracy score of Cuisine by Chance is  :"+ style.END)
 scores = evaluation(results)
 print(scores)
 fig = plt.figure()
 fig.suptitle('Naive Bayes Accuracy')
 ax = fig.add_subplot(111)
 plt.boxplot(scores)
 ax.set_xticklabels('Naive Bayes')
 ax.set_ylabel('Cuisine_by_Chance: Accuracy Score')
 plt.show()

#------------Prediction when we answer the Most Common Cuisine---------------------

def Most_Common_Cuisine():
 data = []
 with open('/content/training.json') as f:
   for line in f:
    data.append(json.loads(line))
 random.shuffle(data)
 l = int(0.75*len(data))
 train_data = data[:l]
 test_data =  data[l:]
 cuisine_probs = get_cuisine_probs(train_data)
 ingredient_prob_given_cuisine = ingredient_prob(train_data)
 results = []
 for recipe in test_data:
   cuisine = max_cuisine(recipe['ingredients'], cuisine_probs, ingredient_prob_given_cuisine)
   results.append(("italian", recipe['cuisine']))

 print( style.BOLD + "Accuracy score of Most_Common_Cuisine is:" + style.END )
 scores = evaluation(results)
 print(scores)
 fig = plt.figure()
 fig.suptitle('Naive Bayes Accuracy')
 ax = fig.add_subplot(111)
 plt.boxplot(scores)
 ax.set_xticklabels('Naive Bayes')
 ax.set_ylabel('Most_Common_Cuisine: Accuracy Score')
 plt.show()
    

def main():
 NB()
 NBCross()
 Cuisine_by_Chance()
 Most_Common_Cuisine()
 

class style:
   BOLD = '\033[1m'
   END = '\033[0m'
main()